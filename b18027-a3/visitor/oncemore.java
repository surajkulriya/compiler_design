//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


// import jdk.javadoc.internal.doclets.formats.html.SourceToHTMLConverter;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class oncemore<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */

   int pkmkb=0;
    public String newTemp(){
        return "JaiShreeRam"+pkmkb++;
    }
    Map<String,Map<String,String>> data=collector.getTable();
    String thistype="int";String daaldo;
    Map<String,String> symbTable= new HashMap<String,String>();
    Map<String,String> symbTable2= new HashMap<String,String>();
    String code="";String code1="";String code2="";String code3="";String code4="";
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(code);
      // System.out.println(data.size());
      // for(Map.Entry<String,Map<String,String>> entry: data.entrySet()){
      //    System.out.println(entry.getKey());
      //    for(Map.Entry<String,String> a:entry.getValue().entrySet()){
      //       System.out.println(a.getKey());
      //       System.out.println(a.getValue());
      //    }

      // }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      thistype=n.f1.f0.tokenImage;
      code1+="class "+n.f1.f0.tokenImage+"{\n public static void main(String[] "+n.f11.f0.tokenImage+") {\n";
      n.f1.accept(this, argu);
      n.f11.accept(this, argu);
      n.f14.accept(this, argu);
      code3+="}\n}\n";
      for(Map.Entry<String,String> entry:symbTable.entrySet()){
         String type=entry.getValue();
         if(type!="int" && type!="boolean" && type!="int[]" ){
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
            code4+=entry.getKey()+" = new "+entry.getValue()+"() ;\n";   
         }
         else{
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
         }
      }
      code+=code1+code2+code3;
      code1="";code2="";code3="";code4="";
      symbTable.clear();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      thistype=n.f1.f0.tokenImage;
      code1+="class "+n.f1.f0.tokenImage+"{\n";
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      code3+="\n } \n";
      for(Map.Entry<String,String> entry:symbTable.entrySet()){
         String type=entry.getValue();
         if(type!="int" && type!="boolean" && type!="int[]" ){
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
            code4+=entry.getKey()+" = new "+entry.getValue()+"() ;\n";   
         }
         else{
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
         }
      }
      code+=code1+code2+code3;
      code1="";code2="";code3="";code4="";
      symbTable.clear();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      thistype=n.f1.f0.tokenImage;
      code1+= "class "+n.f1.f0.tokenImage+" extends "+n.f3.f0.tokenImage+"{\n";
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      code3+="\n}\n";
      for(Map.Entry<String,String> entry:symbTable.entrySet()){
         String type=entry.getValue();
         if(type!="int" && type!="boolean" && type!="int[]" ){
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
            code4+=entry.getKey()+" = new "+entry.getValue()+"() ;\n";   
         }
         else{
            code2+=entry.getValue()+" "+entry.getKey()+" ;\n";
         }
      }
      code+=code1+code2+code3;
      code1="";code2="";code3="";code4="";
      symbTable.clear();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      code3+=(String)n.f0.accept(this,argu)+" "+n.f1.f0.tokenImage+" ;\n";
      symbTable2.put(n.f1.f0.tokenImage,(String)n.f0.accept(this,argu));
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      code3+="public "+(String)n.f1.accept(this,argu)+" "+n.f2.f0.tokenImage+"(";
      n.f4.accept(this, argu);
      code3+=") {\n";
      n.f7.accept(this, argu);
      code3+=code4;
      n.f8.accept(this, argu);
      String suraj=(String)n.f10.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,(String)n.f1.accept(this,argu));
      code3+=suraj2+" = "+suraj+" ;\n";
      code3+="return "+suraj2+";\n}\n";
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      symbTable2.put(n.f1.f0.tokenImage,(String)n.f0.accept(this,argu));
      code3+=(String)n.f0.accept(this,argu)+" "+n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      code3+=" ,";
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      daaldo="int[]";
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      daaldo="boolean";
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      daaldo="int";
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      code3+="{\n";
      n.f1.accept(this, argu);
      code3+="}\n";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   //  modified   
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      // String suraj=(String)n.f2.accept(this,argu);
      // String suraj2=newTemp();
      // symbTable.put(suraj2,daaldo);
      // code3+=suraj2+" = "+suraj+" ;\n";
      // code3+= n.f0.f0.tokenImage+" = "+suraj2+";\n";
      code3+=n.f0.f0.tokenImage+" = "+(String)n.f2.accept(this,argu)+" ;\n";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,daaldo);
      String suraj2=(String)n.f5.accept(this,argu);
      String suraj4=newTemp();
      symbTable.put(suraj4,daaldo);
      code3+=suraj3+" = " + suraj1+" ;\n";
      code3+=suraj4+" = " + suraj2+" ;\n";
      code3+=n.f0.f0.tokenImage+"["+suraj3+"]"+" = "+suraj4+" ;\n";
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      String suraj=(String)n.f0.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,daaldo);
      String suraj2=(String)n.f4.accept(this,argu);
      String suraj4=newTemp();
      symbTable.put(suraj4,daaldo);
      code3+=suraj3+" = "+suraj+" ;\n";
      code3+=suraj4+" = "+suraj2+" ;\n";
      code3+=suraj3+"."+n.f2.f0.tokenImage+" = "+suraj4+" ;\n";
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      String tmp=(String)n.f2.accept(this,argu);
      code3+="if("+tmp+") {\n";
      n.f4.accept(this, argu);
      code3+="} else {\n";
      n.f6.accept(this, argu);
      code3+="}\n";
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String suraj=(String)n.f2.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,"boolean");
      code3+=suraj2+" = "+suraj+" ;\n";
      code3+="while("+suraj2+") {\n";
      n.f4.accept(this, argu);
      code3+="}\n";
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      String suraj=(String)n.f2.accept(this,argu);
      code3+="System.out.println("+suraj+") ;\n";
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"boolean");
      code3+=suraj3+" = "+suraj1+"&&"+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"boolean");
      code3+=suraj3+" = "+suraj1+"||"+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this, argu);
      String suraj2=(String)n.f2.accept(this, argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"boolean");
      code3+= suraj3+" = "+suraj1+" < "+ suraj2+ ";\n";
      _ret=(R)suraj3;
      daaldo="boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"boolean");
      code3+=suraj3+" = "+suraj1+" != "+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"int");
      code3+=suraj3+" = "+suraj1+" + "+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"int");
      code3+=suraj3+" = "+suraj1+" - "+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"int");
      code3+=suraj3+" = "+suraj1+"*"+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"int");
      code3+=suraj3+" = "+suraj1+"/"+suraj2+";\n";
      _ret=(R)suraj3;
      daaldo="int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   //  bug source
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=(String)n.f2.accept(this,argu);
      String suraj3=newTemp();
      symbTable.put(suraj3,"int");
      code3+=suraj3+" = "+suraj1+"["+suraj2+"]"+";\n";
      _ret=(R)suraj3;
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String suraj1=(String)n.f0.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,"int");
      code3+=suraj2+" = "+suraj1+".length ;\n";
      _ret=(R)suraj2;
      daaldo="int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   //  yaha se shuru krna kal
   Vector<String> vsv=new Vector<String>();
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String suraj1=newTemp();
      code3+=suraj1+" = "+(String)n.f0.accept(this,argu)+";\n";
      symbTable2.put(suraj1,daaldo);
      symbTable.put(suraj1,daaldo);
      String suraj3=newTemp();
      // symbTable.put(suraj2,"int");
      // if(data.containsKey(n.f0.accept(this,argu))){
      //    System.out.println("passed");
      //    Map<String,String> m=data.get(n.f0.accept(this,argu));
      //    if(m.containsKey(n.f2.f0.tokenImage)){
      //       System.out.println("method found");
      //    }
      //    else{
      //       System.out.println(n.f2.f0.tokenImage);
      //    }
      // }
      // else{
      //    System.out.println("yeah hai"+suraj1);
      //    if(symbTable2.containsKey(suraj1)) {
      //       System.out.println(symbTable2.get(suraj1));
      //    }
      //    else{
      //       System.out.println("yeah bhi nhi hai");
      //    }
      // }
      daaldo=data.get(symbTable2.get(suraj1)).get(n.f2.f0.tokenImage);
      symbTable2.put(suraj3,daaldo);
      symbTable.put(suraj3,daaldo);
      String tempp=daaldo;
      String suraj=(String)n.f0.accept(this,argu);
      // String suraj2=newTemp();
      
      // code3+=suraj2+" = "+suraj+" ;\n";
      n.f4.accept(this,argu);
      code3+=suraj3+ " = "+ suraj+"."+n.f2.f0.tokenImage+"(";
      for(int i=0;i<vsv.size();i++) code3+=vsv.get(i);
      vsv.clear();
      code3+=") ;\n";
      _ret=(R)suraj3;
      daaldo=data.get(symbTable2.get(suraj1)).get(n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String suraj=(String)n.f0.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,daaldo);
      code3+=suraj2+" = "+suraj+" ;\n";
      vsv.add(suraj2);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      vsv.add(",");
      String suraj=(String)n.f1.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,daaldo);
      code3+=suraj2+" = "+suraj+" ;\n";
      vsv.add(suraj2);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String suraj=newTemp();
      symbTable.put(suraj,"int");
      code3+=suraj+" = "+n.f0.tokenImage+";\n";
      n.f0.accept(this, argu);
      daaldo="int";
      return (R)suraj;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      String suraj=newTemp();
      symbTable.put(suraj,"boolean");
      code3+=suraj+" = "+n.f0.tokenImage+";\n";
      n.f0.accept(this, argu);
      daaldo="boolean";
      return (R)suraj;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      String suraj=newTemp();
      symbTable.put(suraj,"boolean");
      code3+=suraj+" = "+n.f0.tokenImage+";\n";
      n.f0.accept(this, argu);
      daaldo="boolean";
      return (R)suraj;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.tokenImage;
      n.f0.accept(this, argu);
      daaldo=symbTable2.get(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      String suraj=newTemp();
      symbTable.put(suraj,thistype);
      code3+=suraj+" = "+n.f0.tokenImage+";\n";
      n.f0.accept(this, argu);
      daaldo=thistype;
      return (R)suraj;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      String suraj=(String)n.f3.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,"int[]");
      code3+=suraj2+" = new int["+suraj+"];\n";
      _ret=(R)suraj2;
      daaldo="int[]";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      String suraj=newTemp();
      symbTable.put(suraj,n.f1.f0.tokenImage);
      code3+= "new "+n.f1.f0.tokenImage+"() ;\n";
      _ret=(R)suraj;
      daaldo=n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String suraj=(String)n.f1.accept(this,argu);
      String suraj2=newTemp();
      symbTable.put(suraj2,"boolean");
      code3+=suraj2+" = !"+suraj+";\n";
      _ret=(R)suraj2;
      daaldo="boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      String suraj=(String)n.f1.accept(this,argu);
      _ret=(R)suraj;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}