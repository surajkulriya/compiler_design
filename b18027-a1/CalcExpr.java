/* Generated By:JavaCC: Do not edit this line. CalcExpr.java */
import syntaxtree.*;
import java.util.Vector;


public class CalcExpr implements CalcExprConstants {

  static final public Goal Goal() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   PStatement n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = PStatement();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Goal(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PStatement PStatement() throws ParseException {
   NodeChoice n0;
   Statementt n1;
   Statement n2;
    if (jj_2_1(2147483647)) {
      n1 = Statementt();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_2(2147483647)) {
      n2 = Statement();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   Statement1 n0;
   Statement2 n1;
   NodeToken n2;
   Token n3;
    n0 = Statement1();
    n1 = Statement2();
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Statement(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Statementt Statementt() throws ParseException {
   Statement1 n0;
   Statement3 n1;
   Statement2 n2;
   NodeToken n3;
   Token n4;
    n0 = Statement1();
    n1 = Statement3();
    n2 = Statement2();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Statementt(n0,n1,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement3 Statement3() throws ParseException {
   Compstat n0;
    n0 = Compstat();
     {if (true) return new Statement3(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement1 Statement1() throws ParseException {
   Identifier n0;
    n0 = Identifier();
     {if (true) return new Statement1(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement2 Statement2() throws ParseException {
   Identifier n0;
    n0 = Identifier();
     {if (true) return new Statement2(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement AssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new AssignmentStatement(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatment PrintStatment() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(PRINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new PrintStatment(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   PlusExpression n1;
   MinusExpression n2;
   TimesExpression n3;
   PrimaryExpression n4;
    if (jj_2_3(2147483647)) {
      n1 = PlusExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_4(2147483647)) {
      n2 = MinusExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_5(2147483647)) {
      n3 = TimesExpression();
        n0 = new NodeChoice(n3, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        n4 = PrimaryExpression();
        n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
               n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(TIMES);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   Identifier n2;
   BracketExpression n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case IDENTIFIER:
      n2 = Identifier();
        n0 = new NodeChoice(n2, 1);
      break;
    case LPAREN:
      n3 = BracketExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Compstat Compstat() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(COMPSTAT);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Compstat(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BracketExpression BracketExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LPAREN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new BracketExpression(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(COMPSTAT)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalcExprTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x60200,0x60200,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CalcExpr(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalcExpr(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalcExprTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CalcExpr(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CalcExprTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CalcExpr(CalcExprTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalcExprTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
