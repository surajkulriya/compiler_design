//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( PStatement() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n);

   /**
    * f0 -> Statementt()
    *       | Statement()
    */
   public R visit(PStatement n);

   /**
    * f0 -> Statement1()
    * f1 -> Statement2()
    * f2 -> ";"
    */
   public R visit(Statement n);

   /**
    * f0 -> Statement1()
    * f1 -> Statement3()
    * f2 -> Statement2()
    * f3 -> ";"
    */
   public R visit(Statementt n);

   /**
    * f0 -> Compstat()
    */
   public R visit(Statement3 n);

   /**
    * f0 -> Identifier()
    */
   public R visit(Statement1 n);

   /**
    * f0 -> Identifier()
    */
   public R visit(Statement2 n);

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n);

   /**
    * f0 -> <PRINT>
    * f1 -> Expression()
    * f2 -> ";"
    */
   public R visit(PrintStatment n);

   /**
    * f0 -> PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <PLUS>
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS>
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <TIMES>
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n);

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n);

   /**
    * f0 -> <COMPSTAT>
    */
   public R visit(Compstat n);

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n);

}

