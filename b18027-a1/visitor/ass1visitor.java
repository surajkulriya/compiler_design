//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ass1visitor extends GJNoArguDepthFirst<Integer> {

   Map<String, Vector<String>> values = new HashMap<>();
   Map<String,Integer> health=new HashMap<>();
   Map<String,String> house=new HashMap<>();
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Statement() )*
    * f1 -> <EOF>
    */
   public Integer visit(Goal n) {
      Integer _ret=null;
      n.f0.accept(this);
      // n.f1.accept(this);
      n.f1.accept(this);
      // health.put("suraj",10);
      return _ret;
   }



   /**
    * f0 -> Statement1()
    * f1 -> Statement2()
    */
    public Integer visit(Statement n) {
      Integer _ret=null;
      // String id = n.f0.f0.tokenImage;
      String id = n.f0.f0.f0.tokenImage;
      // n.
      String id2 = n.f1.f0.f0.tokenImage;
      if(values.containsKey(id))
      {
         values.get(id).add(id2);
      }
      else
      {
         Vector<String> vc=new Vector<String>(1);
         vc.add(id2);
         values.put(id,vc);
      }
      house.put(id2,id);
      // values.get(id).add(id2);
      health.put(id2,10);
      return _ret;
   }


   /**
    * f0 ->Statement1()
    * f1->Statement3()
    * f3->Statement2()
    */
    public Integer visit(Statementt n){
      Integer _ret=null;
      _ret=1;
      String id=n.f0.f0.f0.tokenImage;
      String id2=n.f1.f0.f0.tokenImage;
      String id3=n.f2.f0.f0.tokenImage;
      if(id2=="<k")
      {
         health.put(id,health.get(id)-5);
         health.put(id3,health.get(id3)+5);
      }
      if(id2==">k")
      {
         health.put(id,health.get(id)+5);
         health.put(id3,health.get(id3)-5);
      }
      if(id2=="<p")
      {
         String h=house.get(id);
         Vector<String> v=values.get(h);
         for(String s:v)
         {
            health.put(s,health.get(s)-10);
         }   
      }
      if(id2==">p")
      {
         String h=house.get(id3);
         Vector<String> v=values.get(h);
         for(String s:v)
         {
            health.put(s,health.get(s)-10);
         }   
      }
      return _ret;
    }
   

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Integer visit(AssignmentStatement n) {
      Integer _ret=null;
      String id = n.f0.f0.tokenImage;
      int val = n.f2.accept(this);
      // values.put(id, val);
      return _ret;
   }

   /**
    * f0 -> <PRINT>
    * f1 -> Expression()
    * f2 -> ";"
    */
   public Integer visit(PrintStatment n) {
      Integer _ret=null;
      int val = n.f1.accept(this);
      System.out.println(val);
      return _ret;
   }

   /**
    * f0 -> PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | PrimaryExpression()
    */
   public Integer visit(Expression n) {
      Integer _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <PLUS>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(PlusExpression n) {
      Integer _ret=null;
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      _ret = val1 + val2;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(MinusExpression n) {
      Integer _ret=null;
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      _ret = val1 - val2;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <TIMES>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(TimesExpression n) {
      Integer _ret=null;
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      _ret = val1 * val2;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier()
    *       | BracketExpression()
    */
   public Integer visit(PrimaryExpression n) {
      Integer _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Integer visit(IntegerLiteral n) {
      Integer _ret=null;
      _ret = Integer.parseInt(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   /*public Integer visit(Identifier n) {
      Integer _ret=null;
      String id = n.f0.tokenImage;
      // _ret = values.get(id);
      _ret=1;
      return _ret;
   }
	*/

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Integer visit(BracketExpression n) {
      Integer _ret=null;
      _ret = n.f1.accept(this);
      return _ret;
   }

   public Map<String,Vector<String>> getvalues(){
      // System.out.println(values.size());
      return values;
   }

   public Map<String,Integer> gethealth(){
      // System.out.println(health.size());
      return health;
   }
   public Map<String,String> gethouse(){
      // System.out.println(health.size());
      return house;
   }

}
