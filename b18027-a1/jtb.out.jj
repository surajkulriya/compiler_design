//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(CalcExpr)
import syntaxtree.*;
import java.util.Vector;


public class CalcExpr 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CalcExpr)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <SEMICOLON: ";">
   | <ASSIGN: "=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <TIMES: "*">
   | <PRINT: "print">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <COMPSTAT: <TLETTER> <FLETTER>>
   | <#TLETTER: [">", "<", "="]>
   | <#FLETTER: ["k", "p"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   PStatement n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=PStatement()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Goal(n0,n2); }
}

PStatement PStatement() :
{
   NodeChoice n0;
   Statementt n1;
   Statement n2;

   
}
{
   (
      LOOKAHEAD(Identifier() Compstat())
      n1=Statementt()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Identifier() Identifier())
      n2=Statement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new PStatement(n0); }
}

Statement Statement() :
{
   Statement1 n0;
   Statement2 n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Statement1()
   n1=Statement2()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new Statement(n0,n1,n2); }
}

Statementt Statementt() :
{
   Statement1 n0;
   Statement3 n1;
   Statement2 n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Statement1()
   n1=Statement3()
   n2=Statement2()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Statementt(n0,n1,n2,n3); }
}

Statement3 Statement3() :
{
   Compstat n0;

   
}
{
   n0=Compstat()
   
   { return new Statement3(n0); }
}

Statement1 Statement1() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new Statement1(n0); }
}

Statement2 Statement2() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new Statement2(n0); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

PrintStatment PrintStatment() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<PRINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PrintStatment(n0,n2,n3); }
}

Expression Expression() :
{
   NodeChoice n0;
   PlusExpression n1;
   MinusExpression n2;
   TimesExpression n3;
   PrimaryExpression n4;

   
}
{
   (
      LOOKAHEAD(PrimaryExpression() "+")
      n1=PlusExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PrimaryExpression() "-")
      n2=MinusExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() "*")
      n3=TimesExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=PrimaryExpression()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Expression(n0); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<PLUS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<MINUS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<TIMES> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   Identifier n2;
   BracketExpression n3;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Identifier()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BracketExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

Compstat Compstat() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<COMPSTAT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Compstat(n0); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<LPAREN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}
